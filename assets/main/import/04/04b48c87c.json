[1,["23PDl1lhRBQIQRTIrdqaqg","dfLTmjpnNGX5DcO/Jc3pk3@f9941","21xig1mlRHsLcJW3pJSUn3@6c48a","9eQdc9XShKcpFP8E/uqrBw","37QnvcD19EDp3lfLqjHZsO@f9941","c15ogtu9RIWpRThnJ7D++8","d9ZuCI3oxHVpUT8/PDao5t@f9941","1ccDh2n91Jh7B+2DqbyBsQ","abrcneTbRBSYRgZFP3VUX7@f9941","37QnvcD19EDp3lfLqjHZsO@6c48a","48QJUZYShLUIAetTLQlcii@6c48a","21VKKEcoVNG5waPglzjngR","abrcneTbRBSYRgZFP3VUX7@6c48a","f7oqUTM7RL9L5gkER1TezZ","21xig1mlRHsLcJW3pJSUn3@f9941","48QJUZYShLUIAetTLQlcii@f9941","d9ZuCI3oxHVpUT8/PDao5t@6c48a","dfLTmjpnNGX5DcO/Jc3pk3@6c48a","627jK0PFtNzJz0/B7VzW3G@6c48a","3dYjo4RXNO/IqCgQoI0d7T"],["node","_spriteFrame","_textureSource","root","_font","main","data","_customMaterial","_effectAsset","asset","extraTexture"],[["cc.Sprite",["_sizeMode","node","__prefab","_spriteFrame","_color","_customMaterial"],2,1,4,6,5,6],"cc.SpriteFrame",["cc.Node",["_name","_layer","_objFlags","__editorExtras__","_prefab","_components","_parent","_children","_lpos","_lscale"],-1,4,9,1,2,5,5],["cc.Label",["_string","_actualFontSize","_fontSize","_isSystemFontUsed","_lineHeight","_enableOutline","node","__prefab","_font","_color"],-3,1,4,6,5],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["cc.TTFFont",["_name","_native"],1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_parent","_children","_components","_prefab"],1,1,2,12,4],["cc.CompPrefabInfo",["fileId"],2],["18c35RnCDlHMIMIswOLyh0g",["node","__prefab","main"],3,1,4,1],["cc.PrefabInfo",["fileId","instance","targetOverrides","root","asset","nestedPrefabInstanceRoots"],0,1,1,2],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["dc823Xhg5pKZ4xsrJyDkVtT",["node","__prefab","main"],3,1,4,1],["cc.TargetInfo",["localID"],2],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],2,1,9],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Material",["_name","_states","_defines","_props"],0,12],["4a9381QHu1Pe7GpVAfP7bZL",["node","__prefab"],3,1,4],["cc.Mask",["_type","_alphaThreshold","node","__prefab"],1,1,4],["cc.Graphics",["node","__prefab","_fillColor"],3,1,4,5]],[[9,0,2],[12,0,1,2,3,4,5,5],[4,0,1,2,1],[2,0,1,6,5,4,3],[2,0,1,6,5,4,8,3],[4,0,1,1],[17,0,1,2,2],[6,0,1,2,4],[7,0,2],[2,0,1,6,7,5,4,3],[5,0,1,3],[2,0,1,7,5,4,3],[2,2,3,6,4,3],[2,0,1,7,5,4,8,9,3],[8,0,1,2,3,4,5,3],[10,0,1,2,1],[11,0,1,2,3,4,5,4],[13,0,1,2,3,4,5,4],[0,0,1,2,4,5,3,2],[0,0,1,2,4,3,2],[0,1,2,1],[0,0,1,2,3,2],[0,1,2,3,1],[0,1,2,4,5,3,1],[0,1,2,4,3,1],[14,0,1,2,1],[15,0,2],[16,0,1,2,2],[18,0,1,2,3],[3,0,1,2,4,3,6,7,9,8,6],[3,0,1,2,3,6,7,8,5],[3,0,1,2,4,3,5,6,7,9,8,7],[19,0,1,2,3,5],[20,0,1,2,3,4],[21,0,1,1],[22,0,1,2,3,3],[23,0,1,2,1]],[[[[10,"Philosopher-Regular","Philosopher-Regular.ttf"],-1],0,0,[],[],[]],[[[7,"../gradient",[{"hash":3573501384,"name":"../gradient|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"alphaLo","type":13,"count":1},{"name":"alphaHi","type":13,"count":1},{"name":"speed1","type":13,"count":1},{"name":"scale1","type":13,"count":1},{"name":"scale2","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"alphaLo","type":13,"count":1},{"name":"alphaHi","type":13,"count":1},{"name":"speed1","type":13,"count":1},{"name":"scale1","type":13,"count":1},{"name":"scale2","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 state;\nout vec3 color;\nout vec2 uv0;\nout vec2 relPix;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  state = a_color;\n  float alpha = smoothstep(0.0, 0.3, state.g);\n  color = mix(vec3(0.8, 0.8, 1.0), vec3(1.0, 1.0, 0.2), alpha);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec3 color;\nin vec4 state;\nin vec2 relPix;\nlayout(std140) uniform Constant{\n  float alphaLo;\n  float alphaHi;\n  float speed1;\n  float scale1;\n  float scale2;\n};\nin vec2 uv0;\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(color, 1.0);\n  vec2 off = cc_time.ww * speed1;\n  #if USE_TEXTURE\n    vec2 noise2 = CCSampleWithAlphaSeparated(cc_spriteTexture, (uv0 + off) * scale1).xy;\n    vec4 raw = CCSampleWithAlphaSeparated(cc_spriteTexture, (uv0 + noise2) * scale2);\n    float gray  = 0.2126 * raw.r + 0.7152 * raw.g + 0.0722 * raw.b;\n    o.a = smoothstep(alphaLo, alphaHi, gray);\n  #endif\n  vec2 c = (uv0 - vec2(0.5, 0.5)) * 2.0;\n  if (abs(c.x) < 0.9 && abs(c.y) < 0.9) {\n    discard;\n  }\n  float toEdge = max(abs(c.x), abs(c.y));\n  o.a *= smoothstep(1.0, 0.92, toEdge);\n  float cl = length(c);\n  o.a *= smoothstep(1.45, 1.2, cl);\n  o.a *= state.x;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 state;\nvarying vec3 color;\nvarying vec2 uv0;\nvarying vec2 relPix;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  state = a_color;\n  float alpha = smoothstep(0.0, 0.3, state.g);\n  color = mix(vec3(0.8, 0.8, 1.0), vec3(1.0, 1.0, 0.2), alpha);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec3 color;\nvarying vec4 state;\nvarying vec2 relPix;\n   uniform float alphaLo;\n   uniform float alphaHi;\n   uniform float speed1;\n   uniform float scale1;\n   uniform float scale2;\nvarying vec2 uv0;\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(color, 1.0);\n  vec2 off = cc_time.ww * speed1;\n  #if USE_TEXTURE\n    vec2 noise2 = CCSampleWithAlphaSeparated(cc_spriteTexture, (uv0 + off) * scale1).xy;\n    vec4 raw = CCSampleWithAlphaSeparated(cc_spriteTexture, (uv0 + noise2) * scale2);\n    float gray  = 0.2126 * raw.r + 0.7152 * raw.g + 0.0722 * raw.b;\n    o.a = smoothstep(alphaLo, alphaHi, gray);\n  #endif\n  vec2 c = (uv0 - vec2(0.5, 0.5)) * 2.0;\n  if (abs(c.x) < 0.9 && abs(c.y) < 0.9) {\n    discard;\n  }\n  float toEdge = max(abs(c.x), abs(c.y));\n  o.a *= smoothstep(1.0, 0.92, toEdge);\n  float cl = length(c);\n  o.a *= smoothstep(1.45, 1.2, cl);\n  o.a *= state.x;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":48}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../gradient|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"alphaLo":{"type":13,"value":[0]},"alphaHi":{"type":13,"value":[0.7]},"speed1":{"type":13,"value":[0.1]},"scale1":{"type":13,"value":[0.5]},"scale2":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"itsmars_orb_fill","rect":{"x":0,"y":0,"width":210,"height":210},"offset":{"x":0,"y":0},"originalSize":{"width":210,"height":210},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-105,-105,0,105,-105,0,-105,105,0,105,105,0],"indexes":[0,1,2,2,1,3],"uv":[0,210,210,210,0,0,210,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-105,"y":-105,"z":0},"maxPos":{"x":105,"y":105,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[2]],[[[8,"u0"],[11,"u0",33554432,[-6,-7,-8,-9,-10,-11],[[5,-3,[0,"2czjqg73NECb2c+1tXw4Fj"]],[15,-5,[0,"13aHX81u1Kdaamkpt7DAk7"],-4]],[16,"c46/YsCPVOJYA4mWEpNYRx",null,null,-2,0,[-1]]],[3,"border",33554432,1,[[2,-12,[0,"8bpYc80SpH9L7CG5VP13u+"],[5,195,204]],[18,0,-13,[0,"986dUSoJVKrpJJ7CU9C2pF"],[4,4278190080],0,1],[25,-15,[0,"51ED+TqedHQoYF43jsnoBI"],-14]],[1,"62hBBac4xK5prykNlAyzKq",null,null,null,1,0]],[14,"frame",33554432,1,[-18],[[[2,-16,[0,"8al6RNaYlBtK1S6BJ7QlRR"],[5,195,204]],-17],4,1],[1,"54JNlAwOpNmqBxcDI9qyZa",null,null,null,1,0]],[26,["6bA/BIzJhPwLnmb9Pm1EP0"]],[9,"number",33554432,1,[-21],[[5,-19,[0,"684Rg4C+FC5rEB+JhJBG/q"]],[19,0,-20,[0,"16ZU4wTGNH+6XnXKOt1l4d"],[4,1250067],5]],[1,"88Ob/LPPxDaIWmQi7jNEpI",null,null,null,1,0]],[20,3,[0,"90k97uNkZDxZNQaItCJ247"]],[12,0,{},3,[17,"6bA/BIzJhPwLnmb9Pm1EP0",null,null,-22,[27,"6fKNI0mbBL6blYBpxOCm/G",1,[[6,["_lpos"],4,[1,63.724,-71.372,0]],[28,"orb",["_name"],4],[6,["_lrot"],4,[3,0,0,0,1]],[6,["_euler"],4,[1,0,0,0]]]],2]],[4,"portrait",33554432,1,[[2,-23,[0,"51G9VJDy9AN5QuV6H81rHR"],[5,160,160]],[21,0,-24,[0,"a3wCy6o75Hz5EVms6j/qdb"],3]],[1,"e5rim+AX5Ejqk+Wm5LpFR7",null,null,null,1,0],[1,0,-8.379,0]],[3,"damage",33554432,5,[[2,-25,[0,"49ip67FuFO8aG3VAxYuT20"],[5,43.445025258280154,75.6]],[29,"15",64.27734375,50,60,false,-26,[0,"b3NZP6qEZMWo5m88l7O/vj"],[4,4278190335],4]],[1,"95pysc/0FGjrk9jtTUVvpy",null,null,null,1,0]],[4,"title",33554432,1,[[2,-27,[0,"22FYXgudxDsKSn7DJogpjK"],[5,31.51883213688848,50.39999999999999]],[30,"bob",25.7109375,20,false,-28,[0,"63mYmWhaJM86FvLWySSjjt"],6]],[1,"18GYIjTmhNg5ocUrFPWZ7/",null,null,null,1,0],[1,0,83.197,0]],[4,"willAct",33554432,1,[[2,-29,[0,"13ni9fTwpIZrTbplRhBt9u"],[5,18.69945257900334,79.6]],[31,"!",77.1328125,60,60,false,true,-30,[0,"2diVNH6udBGrXlfR49+nQ/"],[4,31487],7]],[1,"a3zClp/FNLdb7sFy14UcWC",null,null,null,1,0],[1,-63.251000000000005,-67.533,0]]],0,[0,-1,7,0,3,1,0,0,1,0,5,6,0,0,1,0,-1,2,0,-2,8,0,-3,3,0,-4,5,0,-5,10,0,-6,11,0,0,2,0,0,2,0,5,6,0,0,2,0,0,3,0,-2,6,0,-1,7,0,0,5,0,0,5,0,-1,9,0,3,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,6,1,30],[0,0,0,0,0,0,0,0,6],[7,1,9,1,4,1,4,4,1],[3,4,5,6,0,1,7,0,8]],[[{"name":"pnoise","rect":{"x":0,"y":0,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-128,-128,0,128,-128,0,-128,128,0,128,128,0],"indexes":[0,1,2,2,1,3],"uv":[0,256,256,256,0,0,256,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-128,"y":-128,"z":0},"maxPos":{"x":128,"y":128,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[9]],[[[7,"../materials/orbLiquidFX",[{"hash":107350674,"name":"../materials/orbLiquidFX|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"overlayMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"overlayMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n  uniform sampler2D overlayMap;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n  #endif\n  o *= color;\n  vec2 off = vec2(cc_time.w * 0.04, cc_time.w * 0.12);\n  vec2 rawMask = CCSampleWithAlphaSeparated(overlayMap, (uv0 + off) * vec2(1.2, 1.6)).rg;\n  rawMask = CCSampleWithAlphaSeparated(overlayMap, uv0 + rawMask).rg;\n  vec3 modify = vec3(0.2, 0.2, 0.2) * smoothstep(0.2, 1.0, rawMask.r);\n  o.rgb -= modify;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n  uniform sampler2D overlayMap;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n  #endif\n  o *= color;\n  vec2 off = vec2(cc_time.w * 0.04, cc_time.w * 0.12);\n  vec2 rawMask = CCSampleWithAlphaSeparated(overlayMap, (uv0 + off) * vec2(1.2, 1.6)).rg;\n  rawMask = CCSampleWithAlphaSeparated(overlayMap, uv0 + rawMask).rg;\n  vec3 modify = vec3(0.2, 0.2, 0.2) * smoothstep(0.2, 1.0, rawMask.r);\n  o.rgb -= modify;\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../materials/orbLiquidFX|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"extraTexture":{"value":"grey","type":28,"handleInfo":["overlayMap",0,28]},"overlayMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[{"name":"itsmars_orb_highlight","rect":{"x":0,"y":0,"width":210,"height":210},"offset":{"x":0,"y":0},"originalSize":{"width":210,"height":210},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-105,-105,0,105,-105,0,-105,105,0,105,105,0],"indexes":[0,1,2,2,1,3],"uv":[0,210,210,210,0,0,210,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-105,"y":-105,"z":0},"maxPos":{"x":105,"y":105,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[10]],[[[32,"selectionsGlow",[{"alphaHi":1,"speed1":0.035,"scale1":0.3,"scale2":2}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"IS_GRAY":true}]]],0,0,[0],[8],[11]],[[{"name":"unit_frame0","rect":{"x":0,"y":0,"width":195,"height":204},"offset":{"x":0,"y":0},"originalSize":{"width":195,"height":204},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-97.5,-102,0,97.5,-102,0,-97.5,102,0,97.5,102,0],"indexes":[0,1,2,2,1,3],"uv":[0,204,195,204,0,0,195,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-97.5,"y":-102,"z":0},"maxPos":{"x":97.5,"y":102,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[12]],[[[8,"orb"],[13,"orb",33554432,[-4,-5,-6],[[5,-2,[0,"afx3XZ6AxKVIWPFzfpHjMn"]],[34,-3,[0,"19PyfMMUFECIIumq1TyIhC"]]],[1,"6bA/BIzJhPwLnmb9Pm1EP0",null,null,null,-1,0],[1,427.058,-133.351,0],[1,0.25,0.25,1]],[9,"Mask",33554432,1,[-10],[[2,-7,[0,"5bq7abbChETqxDGlpDQO5E"],[5,210,210]],[35,2,0.4,-8,[0,"67GC6CLnZFPYZTXejcpD7h"]],[36,-9,[0,"ee3DYr7BRC2L8QhAc4gyVs"],[4,16777215]]],[1,"153WSKFwhGc6ym773RABDn",null,null,null,1,0]],[3,"bg",33554432,1,[[2,-11,[0,"b1lr5l/L1EgZ5pcd+fGpHj"],[5,210,210]],[22,-12,[0,"9eh7vQaOtOLrJSlVCZ9fja"],0]],[1,"61vGhJGkpNzoiaJbv7Tgww",null,null,null,1,0]],[3,"Sprite",33554432,2,[[2,-13,[0,"e810NbFWBNeZO6LPevTC90"],[5,210,210]],[23,-14,[0,"cemtWkhBhM4Ltmj8LUIjXL"],[4,4278190260],1,2]],[1,"a28ETQ9RhO6puQpurBhcIv",null,null,null,1,0]],[3,"itsmars_orb_highlight",33554432,1,[[2,-15,[0,"dbLJdzq1xLtakf0vSD5EUT"],[5,210,210]],[24,-16,[0,"b0hXvvm/BBSbFvXoDuTD8g"],[4,1375731711],3]],[1,"f1jMlpxvRD55wF8FRdpMcE",null,null,null,1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,3,0,-2,2,0,-3,5,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,6,1,16],[0,0,0,0],[1,7,1,1],[1,13,14,15]],[[{"name":"tex_swirl_0003_MK","rect":{"x":0,"y":0,"width":2048,"height":2048},"offset":{"x":0,"y":0},"originalSize":{"width":2048,"height":2048},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-1024,-1024,0,1024,-1024,0,-1024,1024,0,1024,1024,0],"indexes":[0,1,2,2,1,3],"uv":[0,2048,2048,2048,0,0,2048,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-1024,"y":-1024,"z":0},"maxPos":{"x":1024,"y":1024,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[16]],[[{"name":"itsmars_orb_back2","rect":{"x":0,"y":0,"width":210,"height":210},"offset":{"x":0,"y":0},"originalSize":{"width":210,"height":210},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-105,-105,0,105,-105,0,-105,105,0,105,105,0],"indexes":[0,1,2,2,1,3],"uv":[0,210,210,210,0,0,210,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-105,"y":-105,"z":0},"maxPos":{"x":105,"y":105,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[17]],[[[33,"orbLiquid",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"extraTexture",6,0]],11]]],0,0,[0,0],[10,8],[18,19]]]]
